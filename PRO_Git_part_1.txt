PRO Git (конспект)

config
	--system - для всех пользователей на этом ПК
	--global - для текущего пользователя на этом ПК
	без директивы - для текущего проекта (файл будет сохраняться в .git/config)
	$ git config --list - посмотреть все существующие настройки конфига

Первые настройки
	$ git config --global user.name "John Doe"
	$ git config --global user.email johndoe@example.com

Клонирование репозитория
	$ git clone [url] - в текущем месте создаст директорию с именем проекта и сложит туда текущее состояние файлов.
	$ git clone [url] [folderName] - тоже самое, только можно явно указать имя папки для проекта.

Отслеживание файлов
	$ git add [fileName] - заставляет отслеживать изменения в файле и индексирует изменения, если файл ранее был добавлен в репозиторий.
	$ git add [folderName] - аналогично файлу, только для директорий и всех внутренних файлов рекурсивно.
	$ git status [-s] - Полный вывод текущего состояния рабочей копии, [-s] - сокращенный вывод (название файла и метка, что с ним произошло)
		M - modified
		A - added
		?? - untracked

Игнорирование файлов
	$ touch .gitignore - создать пустой файл, из которого git возьмет маски имен файлов, и не будет обращать на них внимание при работе с репозиторием.
	Правила для составления файла .gitignore
		# - комментарий
		пустая строка - игнорируется
		"/" в начале строки - избегаем рекурсии, указываем явно корень
		"/" в конце строки - явно указываем на каталог
		"!" - инверсия выбора
		"*" - 0 или более символов
		остальное похоже на регулярные выражения

Изменения внутри файлов
	$ git diff - показывает отличие строк в файлах (сравнивает содержимое рабочего каталога с содержимым индекса).
	$ git diff [--staged|--cached] - сравнивает содержимое индекса с последним коммитом.
	$ git difftool - вызов текущего графического редактора для просмотра отличий
	$ git difftool --tool-help - увидеть какие редакторы мне доступны

Фиксация изменений
	$ git commit - вызов внешнего редактора для написания коммита сообщения и, собственно, фиксация.
	$ git commit [-v] - тоже самое, только в редактор ввода сообщения будет выведен diff, для информации.
	$ git commit [-m "My commit message"] - коммит с комментарием прямо из bash.
	$ git commit [-a] - автоматически зафиксировать (и закоммитить), все отслеживаемые файлы.

Удаление файлов
	$ git rm [filename] - Удаляет файл из рабочего каталога и из индекса, больше мы его не отслеживаем.
	$ git rm [--cached] [filename] - удалить из индекса, но оставить в рабочем каталоге (например, для добавления в игнор).


Перемещение файлов
	$ git не отслеживает перемещение файлов явно, ему нужно говорить об этом.
	$ git mv [file_from] [file_to] - переименовывает и перемещает файл по факту и запоминает это.

История коммитов
	$ git log - список коммитов в обратном хронологическом порядке
	$ git log [-p] - добавляет к выводу diff для каждого коммита.
	$ git log [--stat] - добавляет сокращенную статистику для каждого коммита.
	$ git log [--pretty=format:"%h - %an, %ar : %s"] - форматированный вывод логов коммита, по своему желанию
		%H Хеш коммита
		%h Сокращенный хеш коммита
		%an Имя автора
		%ad Дата автора (формат даты можно задать опцией --date=option)
		%cn Имя коммитера
		%cd Дата коммитера
		%s Содержание (комментарий)
		(команды не все)
	$ git log [--graph] - добавлет граф, прямо в консоли.
	$ git log [--since=2.weeks] - лог коммитов за последние 2 недели.
	$ git log [-S{искомый текст}] - ищет по тексту файлов, в истории, упоминания нужного фрагмента.

	Пример вызова
		$ git log --pretty="%h - %s" --author=gitster --since="2008-10-01" --before="2008-11-01" --no-merges -- t/

Отмена коммита
	$ git commit [--amend] - сложная штука, надо дополнительно почитать, как это работает

Отмена добавления в индекс
	$ git reset HEAD [filename] - отмена индексации указанного файла.

Остановился на стр 45/519