Глава 2. Основы ветвления.

Создание ветки
	$ git branch [branchName] - создает в локальном репозитории ветку, с именем branchName, но не переходит на неё автоматически.
	$ git log [--oneline --decorate] - показывает, на какой коммит сейчас указывает каждая ветка.
	$ git checkout [branchName] - переключить рабочую копию на желаемую ветку branchName.
	$ git log [--oneline --decorate --graph --all] - посмотреть историю коммитов по веткам с графом!
	$ git checkout [-b branchName] - создать ветку и сразу переключиться на неё.

Слияние ветки
	Перед слиянием нужно перейти в ту ветку, в которую мы будем вливать изменения.
	$ git merge [branchName] - Выполняет слияние изменений ветки branchName в текущую ветку.

	fast-forward - признак того, что слияние выполнено успешно и гиту понадобилось только переставить указатель
	текущей ветки в тоже положение, что и у branchName.

Удаление ветки
	$ git branch [-d branchName] - удаление ветки.
	$ git branch [-D branchName] - Удалить ветку, даже не смотря на то, что мы её не мерджили в целевую ветку.

Конфликт при слиянии
	При слиянии, если в двух ветках был изменен один и тот же файл и одна и та же строка, то git попросит вас вручную определить, что нужно
	оставить, а что удалить.
	$ git mergetool - запустить графический инструмент по разрешению конфликтов.
	После устранения всех конфликтов, файлы нужно проиндексировать (через $ git add) и закоммитить.

Управление ветками
	$ git branch - посмотреть список отслеживаемых мною веток.
	$ git branch [-v] - покажет последний коммит для каждой ветки.
	$ git branch [--merged] - покажет список веток, смердженных с текущей веткой.
	$ git branch [--no-merged] - покажет список веток, не смердженных с текущей веткой.

	Ветки отличаются друг от друга, существуют локальные ветки (на вашем ПК, в вашем репозитории) и удаленные (на сервере).
	Локальными можно управлять как хочешь.
	Удалённые ветки действуют как закладки для напоминания о том, где ветки в удалённых репозиториях находились во
	время последнего подключения к ним.
	Удаленные ветки именуются с названием удаленного репозитория - (имя удал. репоз.)/(ветка)
	Пример: origin/issue53

Синхронизация удаленной ветки и локальной
	$ git fetch origin - команда ищет, какому серверу соответствует “origin”, извлекает оттуда все данные, которых у вас ещё нет,
	и обновляет ваше локальное хранилище данных; сдвигает указатель origin/master на новую позицию.
	$ git fetch [--all] - Обновляет информацию обо всех отслеживаемых ветках у вас на локальном ПК.

	Ваши локальные ветки автоматически не синхронизируются с удалёнными серверами — вам нужно явно отправить
	те ветки, которыми вы хотите поделиться.
	Важно отметить, что когда при получении данных у вас появляются новые удалённые ветки, вы не получаете 
	автоматически для них локальных редактируемых копий.

	$ git checkout [-b branchName origin/branchName] - создать у себя локальную ветку, такую же, как и на сервере.
	$ git checkout --track [origin/branchName] - тоже самое, что и команда выше, но тут мы даже не пытаемся назвать 
	свою локальную ветку, не так как удаленную.

	$ git branch [-u origin/branchName] - привязать текущую локальную ветку, к ветке на сервере.
	$ git branch [-vv] - посмотреть, с какими удаленными ветками связаны мои локальные ветки.
		ahead n - значит локальная ветка опережает удаленную на n-коммитов.
		behind n - значит локальная ветка отстает на n-коммитов от удаленной ветки.

	$git pull - ОТКРОВЕНИЕ! По сути является командами git fetch и потом git merge последовательно!

Отправка ветки на сервер
	$ git push [remote-name branchName] - Отправляет на сервер вашу ветку branchName со всеми коммитами.

Кэширование пароля
	$ git config [--global credential.helper cache] - вроде должен кэшировать пароль и не спрашивать его для каждого пуша.

Удаление ветки на сервере
	$ git push [remote-name --delete branchName] - удалить ветку на сервере и больше ничего не сделает.

Перебазирование (redase)
	$ git rebase [--onto targetBranchName middleBranchName sourceBranchName] - сложная штука, не понял как это сработало.
	Описание прямо из книги: переключиться на ветку sourceBranchName, то есть взять изменения от общего
	предка веток sourceBranchName и middleBranchName и повторить их на targetBranchName.
	(откройте книгу и посмотрите картинку, может понятнее станет).

	Не перемещайте коммиты, уже отправленные в публичный репозиторий!

Остановился на странице 93 из 519


