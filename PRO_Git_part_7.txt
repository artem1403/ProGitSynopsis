Выбор ревизии
	$ git log --abbrev-commit - покажет сокращенные хеши коммитов, но сохраняющие свою уникальность по проекту.
	Ссылаться на коммиты можно и по названию существующей ветки.
	$ git show master@{yesterday} - покажет коммит, где была ветка master вчера.
	Если вы поместите ^ в конце ссылки, Git поймет, что нужно использовать родителя этого коммита, например HEAD^, что означает “родитель HEAD”. d921970^2 означает “второй родитель коммита d921970”. Второе важное обозначение для указания предков это ~. Оно также ссылается на первого родителя, поэтому HEAD~ и HEAD^ эквивалентны. Различия становятся заметными, когда вы указываете число. HEAD~2 означает “первый родитель первого родителя” или “прадедушка” – переход к первому родителю осуществляется столько раз, сколько вы указали.
	
Диапазоны коммитов
	Две точки - включить в диапазон коммитов только те, которые достижимы из одной, но не достижимы из другой ветки.
	$ git log master..experiment – она означает “все коммиты, которые доступны из ветки experiment, но не доступны из ветки master”.
	$ git log experiment..master - увидеть все коммиты ветки master, которых нет в ветке experiment, вы можете поменять имена веток в команде. При использовании записи experiment..master будут отображены все коммиты ветки master, недоступные из ветки experiment.
	$ git log origin/master..HEAD - покажет вам все коммиты вашей текущей ветки, которые отсутствуют в ветке master удаленного репозитория origin. Вы также можете опустить одну из частей в такой записи, Git будет считать ее равной HEAD. 
	
	Три точки - все коммиты, доступные хотя бы из одной ссылки, но не из обеих сразу. Если вы хотите узнать какие коммиты есть либо в ветке master, либо в experiment, но не в обеих сразу.
	
Индексирование изменений (интерактивное, по частям)
	$ git add -i - интерактивное индексирование изменений в файлах. Выполняется в несколько этапов, сначала выбираем файлы, котоыре будем индексировать, затем выбираем действие, которое будет произведено.
	$ git add --patch - поочередно показывает изменения из файлов и спрашивает, индексировать это или нет.
	$ git checkout --patch - оочередно показывает изменения из файлов и спрашивает, откатывать изменения или нет.

Остановился на главе 7.3 Инструменты Git - Прибережение и очистка


Прерывания слияния
	$ git merge [--abort] - Прерывание слияния, остановит текущий процесс мерджа и откатит на то, как было. Не сработает, если перед мерджем были незакоммиченные изменения на момент начала.
	$ git reset [--hard HEAD] - Откатиться на состояние последнего коммита, без всяких вопросов и сожаления.

Игнорирование пробельных символов при слиянии
	$ git merge [branchName] [-Xignore-all-space] - Позволяет игнорировать изменения в любом количестве(?) существующих пробельных символов.
	$ git merge [branchName] [-Xignore-space-change] - Позволяет игнорировать все изменения пробельных символов.
